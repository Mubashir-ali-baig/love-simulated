{"ast":null,"code":"import _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/objectWithoutPropertiesLoose\";\nconst _excluded = [\"blurhash\", \"thumbhash\"];\nimport resolveAssetSource from './resolveAssetSource';\nimport { resolveBlurhashString, resolveThumbhashString } from './resolveHashString';\nexport function isBlurhashString(str) {\n  return /^(blurhash:\\/)+[\\w#$%*+,\\-.:;=?@[\\]^_{}|~]+(\\/[\\d.]+)*$/.test(str);\n}\nexport function isThumbhashString(str) {\n  return str.startsWith('thumbhash:/');\n}\nfunction resolveSource(source) {\n  if (typeof source === 'string') {\n    if (isBlurhashString(source)) {\n      return resolveBlurhashString(source);\n    } else if (isThumbhashString(source)) {\n      return resolveThumbhashString(source);\n    }\n    return {\n      uri: source\n    };\n  }\n  if (typeof source === 'number') {\n    return resolveAssetSource(source);\n  }\n  if (typeof source === 'object' && (source?.blurhash || source?.thumbhash)) {\n    const {\n        blurhash,\n        thumbhash\n      } = source,\n      restSource = _objectWithoutPropertiesLoose(source, _excluded);\n    const resolved = thumbhash ? resolveThumbhashString(thumbhash) : resolveBlurhashString(blurhash);\n    return Object.assign({}, resolved, restSource);\n  }\n  return source ?? null;\n}\nexport function resolveSources(sources) {\n  if (Array.isArray(sources)) {\n    return sources.map(resolveSource).filter(Boolean);\n  }\n  return [resolveSource(sources)].filter(Boolean);\n}","map":{"version":3,"names":["resolveAssetSource","resolveBlurhashString","resolveThumbhashString","isBlurhashString","str","test","isThumbhashString","startsWith","resolveSource","source","uri","blurhash","thumbhash","restSource","_objectWithoutPropertiesLoose","_excluded","resolved","Object","assign","resolveSources","sources","Array","isArray","map","filter","Boolean"],"sources":["/Users/mubashir/Documents/love-simulated/node_modules/expo-image/src/utils/resolveSources.tsx"],"sourcesContent":["import resolveAssetSource from './resolveAssetSource';\nimport { resolveBlurhashString, resolveThumbhashString } from './resolveHashString';\nimport { ImageNativeProps, ImageProps, ImageSource } from '../Image.types';\n\nexport function isBlurhashString(str: string): boolean {\n  return /^(blurhash:\\/)+[\\w#$%*+,\\-.:;=?@[\\]^_{}|~]+(\\/[\\d.]+)*$/.test(str);\n}\n\n// Base64 strings will be recognized as blurhash by default (to keep compatibility),\n// interpret as thumbhash only if correct uri scheme is provided\nexport function isThumbhashString(str: string): boolean {\n  return str.startsWith('thumbhash:/');\n}\n\nfunction resolveSource(source?: ImageSource | string | number | null): ImageSource | null {\n  if (typeof source === 'string') {\n    if (isBlurhashString(source)) {\n      return resolveBlurhashString(source);\n    } else if (isThumbhashString(source)) {\n      return resolveThumbhashString(source);\n    }\n    return { uri: source };\n  }\n  if (typeof source === 'number') {\n    return resolveAssetSource(source);\n  }\n  if (typeof source === 'object' && (source?.blurhash || source?.thumbhash)) {\n    const { blurhash, thumbhash, ...restSource } = source;\n    const resolved = thumbhash\n      ? resolveThumbhashString(thumbhash)\n      : resolveBlurhashString(blurhash as string);\n    return {\n      ...resolved,\n      ...restSource,\n    };\n  }\n  return source ?? null;\n}\n\n/**\n * Resolves provided `source` prop to an array of objects expected by the native implementation.\n */\nexport function resolveSources(sources?: ImageProps['source']): ImageNativeProps['source'] {\n  if (Array.isArray(sources)) {\n    return sources.map(resolveSource).filter(Boolean) as ImageSource[];\n  }\n  return [resolveSource(sources)].filter(Boolean) as ImageSource[];\n}\n"],"mappings":";;AAAA,OAAOA,kBAAkB,MAAM,sBAAsB;AACrD,SAASC,qBAAqB,EAAEC,sBAAsB,QAAQ,qBAAqB;AAGnF,OAAM,SAAUC,gBAAgBA,CAACC,GAAW;EAC1C,OAAO,yDAAyD,CAACC,IAAI,CAACD,GAAG,CAAC;AAC5E;AAIA,OAAM,SAAUE,iBAAiBA,CAACF,GAAW;EAC3C,OAAOA,GAAG,CAACG,UAAU,CAAC,aAAa,CAAC;AACtC;AAEA,SAASC,aAAaA,CAACC,MAA6C;EAClE,IAAI,OAAOA,MAAM,KAAK,QAAQ,EAAE;IAC9B,IAAIN,gBAAgB,CAACM,MAAM,CAAC,EAAE;MAC5B,OAAOR,qBAAqB,CAACQ,MAAM,CAAC;KACrC,MAAM,IAAIH,iBAAiB,CAACG,MAAM,CAAC,EAAE;MACpC,OAAOP,sBAAsB,CAACO,MAAM,CAAC;;IAEvC,OAAO;MAAEC,GAAG,EAAED;IAAM,CAAE;;EAExB,IAAI,OAAOA,MAAM,KAAK,QAAQ,EAAE;IAC9B,OAAOT,kBAAkB,CAACS,MAAM,CAAC;;EAEnC,IAAI,OAAOA,MAAM,KAAK,QAAQ,KAAKA,MAAM,EAAEE,QAAQ,IAAIF,MAAM,EAAEG,SAAS,CAAC,EAAE;IACzE,MAAM;QAAED,QAAQ;QAAEC;MAAwB,CAAE,GAAGH,MAAM;MAArBI,UAAU,GAAAC,6BAAA,CAAKL,MAAM,EAAAM,SAAA;IACrD,MAAMC,QAAQ,GAAGJ,SAAS,GACtBV,sBAAsB,CAACU,SAAS,CAAC,GACjCX,qBAAqB,CAACU,QAAkB,CAAC;IAC7C,OAAAM,MAAA,CAAAC,MAAA,KACKF,QAAQ,EACRH,UAAU;;EAGjB,OAAOJ,MAAM,IAAI,IAAI;AACvB;AAKA,OAAM,SAAUU,cAAcA,CAACC,OAA8B;EAC3D,IAAIC,KAAK,CAACC,OAAO,CAACF,OAAO,CAAC,EAAE;IAC1B,OAAOA,OAAO,CAACG,GAAG,CAACf,aAAa,CAAC,CAACgB,MAAM,CAACC,OAAO,CAAkB;;EAEpE,OAAO,CAACjB,aAAa,CAACY,OAAO,CAAC,CAAC,CAACI,MAAM,CAACC,OAAO,CAAkB;AAClE","ignoreList":[]},"metadata":{"hasCjsExports":false},"sourceType":"module","externalDependencies":[]}